
NOTE DEVELOPMENT:

-- Project ini menggunakan sequelize sebagai ORM
-- Selain install sequelize, perlu juga install manual driver postgresql untuk sequelize

-- Jalankan "sequelize-cli init" untuk membuat direktori migrations, seeders, models. 
-- Serta juga menggenerate file index.js di dalam folder models, file ini nantinya akan berperan sebagai titik masuk (entry point) untuk mengimport semua model yg ada
-- Serta juga menggenerate file config.json. sesuakan koneksi databasenya pakai yg development

-- File config.json saat ini saya ignore karena memuat data credential AWS RDS
-- Jadi saya sediakan file config.example.json

-- Membuat file model sekaligus beserta dengan migration nya dengan perintah "npx sequelize-cli {nama model}"
-- File migration dan model yg dihasilkan masih menerapkan commonJs module, jadi untuk file modelnya saya ubah menjadi Es module
-- Namun untuk file migration nya tetap dibiarkan menggunakan commonJS. karena secara default sequelize-cli masih menerapkan commonJS
-- Sehingga ketika akan run migrasi nya (db:migrate) nanti sementara package.json >> type diubah jadi "commonjs". lalu jangan lupa dikembalikan lagi ke "module" ketika selesai menjalankan migrasi.
-- Untuk menjalankan seeder: db:migrate:all

-- Aplikasi ini menerapkan 2 validator, express-validator dan validator bawaan sequelize yg di set di file model (sudah disediakan sebuah helper untuk generate response error kedua validasi tersebut)

-- Untuk ambil data user aktif (sedang login) dari controller, bisa dari "req.userData" atau "User.getUserFromToken(req)"

-- Di sequelize, query "where" hanya bisa dilakukan sekali, berbeda dengan di Eloquent laravel yang bisa di "chaining" semisal "->where()->where()". kalau di sequelize harus "Where:{object}", tidak bisa "Where:{condition},Where:{condition}"
-- Jadi jika memerlukan banyak kondisi where, maka harus dibungkus menjadi suatu object dahulu.

-- Pada beberapa function yg kompleks (yg mengandung banyak interaksi database yang berbeda2), disini menggunakan fitur Database Transaction yang disediakan oleh sequelize.

-- Pada fitur upload file, untuk parsing form-data, disini menggunakan third party middleware (multer), namun untuk menyimpan file nya tetap memakai modul fs. (ini agar lebih rapi saja struktur kodenya)
-- Namun sebenarnya bisa saja langsung memanfaatkan multer, tanpa memakai modul fs. 

-- Untuk fitur pembayaran, saat ini masih dengan metode upload bukti saja

-- Untuk fitur pengiriman barang, kita memanfaatkan API external dari rajaongkir. ini mencakup pemakaian data provinsi, kecamatan, kurir, dan cek cost pengiriman.
-- Existing karena keterbatasan fitur, setelah order dibuat dan data pengirimannya terisi, maka dibuat seolah-olah barang yang dikirimkan tersebut sudah langsung diterima oleh pelanggan, 
-- Sehingga pelanggan bisa langsung konfirmasi penerimaan untuk menyelesaikan orderan




INSTALL APLIKASI DI DALAM DOCKER CONTAINER?

1. Buat file config.json berdasarkan examplenya. dan sesuaikan konfigurasi development nya. host:namaContainerPostgres
2. Ubah package.json > type:commonjs (skip ke langkah 8 jika tidak perlu menjalankan migrasi & seeder)
3. Ubah Dockerfile, pastikan yang dijalankan adalah CMD pertama 
4. docker compose up
5. docker compose down
6. Ubah Kembali package.json > type:module
7. Buka lagi Dockerfile, sekarang kembalikan pakai CMD yang kedua
8. docker compose build --no-cache
9. docker compose up
11. Pastikan Dockerfile seperti seperti kondisi awal (Discard Changes)

taraaa...

* kenapa harus diulang berkali-kali? 
  karena file migration & seeder masih menerapkan commonjs, sedangkan keseluruhan aplikasi berjalan dengan ES Module



PENGUJIAN MENGGUNAKAN JEST & SUPERTEST

-- kode pengujian dibangun dengan kombinasi Jest (sebagai kerangkanya) dan Supertest (sebagai alat untuk simulasi hit http endpoint)
-- Exsisting Jest hanya support commonJs, jadi disini kita menggunakan Babel (Babel-jest) untuk transform kode ESM ke CommonJS
-- Implementasi Babel-jest perlu dilakukan beberapa konfigurasi, seperti di package.json, babel-config.json, dll
-- ada beberapa syntax ESM yang tidak bisa ditransform oleh Babel-jest, seperti "import.meta.url". jadi perlu disesuaikan dahulu
-- secara default, Babel tidak men-transorm file di node_modules, jadi ada beberapa dependency yang perlu di downgrade agar tetap bisa menyesuaikan ke kode commonJs
-- ketika menjalankan test, sebaiknya kode untuk menjalankan server dan pemanggilan function cronjob dicomment dulu, karena akan mempengaruhi server jest 
